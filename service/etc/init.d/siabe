#! /bin/bash

### BEGIN INIT INFO
# Provides: siabe
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6 
# Short-Description: SIA BackEnd

### END INIT INFO
# Author: nicolae.murgu@1and1.ro

# Development Do NOT "set -e"

# Tool name
NAME="siabe"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
INIT_VERBOSE=yes

# App specific properties
DESC="SIA BackEnd"
START_DAEMON=0
APP_DAEMON="/usr/bin/$NAME"

# Read default configuration that might overwite any of the above variables
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Exit if the package is not installed
[ -x "$APP_DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions. Depend on lsb-base (>= 3.2-14) to ensure that this file is present and status_of_proc is working.
. /lib/lsb/init-functions

##############################################################################
# Function that starts the daemon/service
##############################################################################
do_start() {
  # Return codes:
  # - 0: Service has been started and daemonized
  # - 1: Service is already started
  # - 2: Service could not be started

  # Ask wrapper to start and daemonize the service
  RET_OUTPUT=$($APP_DAEMON start 2>&1)
  RET_CODE=$?
  if [ "$RET_CODE" != "0" ]; then
    [ "$VERBOSE" != no ] && log_daemon_msg "$RET_OUTPUT"
  fi
  return $RET_CODE
}


##############################################################################
# Function that stops the daemon/service
##############################################################################
do_stop() {
  # Return codes
  # - 0: Service has been stopped
  # - 1: Service is already stopped
  # - 2: Service could not be stopped

  # Ask wrapper to stop the service
  RET_OUTPUT=$($APP_DAEMON stop 2>&1)
  RET_CODE=$?
  if [ "$RET_CODE" != "0" ]; then
    [ "$VERBOSE" != no ] && log_daemon_msg "$RET_OUTPUT"
  fi
  return $RET_CODE
}


##############################################################################
# Function that returns service status
##############################################################################
do_status() {
  # Return codes
  # - 0: Service is running
  # - 1: Service is not running

  #Ask wrapper to stop the service
  RET_OUTPUT=$($APP_DAEMON status 2>&1)
  RET_CODE=$?
  [ "$VERBOSE" != no ] && log_daemon_msg "$RET_OUTPUT"
  return $RET_CODE
}


##############################################################################
# Main entry point
##############################################################################
case "$1" in
  start)
  [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
  do_start
  RET_CODE=$?
  case "$RET_CODE" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  exit $RET_CODE
  ;;

  stop)
  [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
  do_stop
  RET_CODE=$?
  case "$RET_CODE" in
    0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
    2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
  esac
  exit $RET_CODE
  ;;

  status)
  do_status
  RET_CODE=$?
  exit $RET_CODE
  ;;

  restart)
  [ "$VERBOSE" != no ] && log_daemon_msg "Restarting $DESC" "$NAME"
  do_stop
  RET_CODE=$?
  case "$RET_CODE" in
    0|1)
    do_start
    RET_CODE=$?
    case "$RET_CODE" in
      0) log_end_msg 0 ;;
      1) log_end_msg 1 ;; # Old process is still running
      *) log_end_msg 1 ;; # Failed to start
    esac
    ;;
    *)
    # Failed to stop
    log_end_msg 1
    ;;
  esac
  exit $RET_CODE
  ;;

  *)
  echo "Usage: /etc/init.d/$NAME {start|stop|status|restart}" >&2
  exit 3
  ;; esac
:
